Test ``101-lazy_matrix_mul.txt`` for the ``101-lazy_matrix_mul`` module

===========================
 Using ``101-lazy_matrix_mul``
===========================

This file tests the function ``lazy_matrix_mul``.

Import
======

>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Integers and floats
==================

``lazy_matrix_mul()`` returns a new matrix product of two matrices with NumPy.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(matrix_a, matrix_b))
    [[ 7 10]
     [15 22]]

    >>> matrix_a = [
    ...    [1, 2]
    ... ]
    >>> matrix_b = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(matrix_a, matrix_b))
    [[13 16]]

    >>> matrix_a = [
    ...    [1.5, 2],
    ...    [2.5, 3],
    ...    [3.5, -2.7]
    ... ]
    >>> matrix_b = [
    ...    [4.1, 0.3, -10, -1.2],
    ...    [0, 2, -20, 2]
    ... ]
    >>> print(lazy_matrix_mul(matrix_a, matrix_b))
    [[  6.15   4.45 -55.     2.2 ]
     [ 10.25   6.75 -85.     3.  ]
     [ 14.35  -4.35  19.    -9.6 ]]

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3j, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(matrix_a, matrix_b))
    [[ 7.+0.j 10.+0.j]
     [12.+3.j 16.+6.j]]

Checking matrix argument length of rows exception.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(matrix_a, matrix_b))
    Traceback (most recent call last):
        ...
    ValueError: setting an array element with a sequence.

    >>> matrix_a = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4, 5]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: setting an array element with a sequence.

Checking correct dimensions of matrices to be multiplied.

::

    >>> matrix_a = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_b = [
    ...    [1, 3, 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (1,3) not aligned: 2 (dim 1) != 1 (dim 0)

    >>> matrix_a = [
    ...    [1, 2, 3],
    ...    [3, 4, 5],
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

Checking non-empty matrices.

::

    >>> matrix_a = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> lazy_matrix_mul([[]], matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> lazy_matrix_mul(matrix_a, [])
    Traceback (most recent call last):
        ...
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Non numbers
================================

The ``lazy_matrix_mul`` function is not defined for non-numbers.

Checking type exception.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    ["hola", 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: invalid data type for einsum

    >>> matrix_a = [
    ...    [1, [1, 2]],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: setting an array element with a sequence.

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [("Hello", "World"), 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: setting an array element with a sequence

    >>> matrix_a = [
    ...    [{"hello": "world"}, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: Object arrays are not currently supported

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> lazy_matrix_mul(matrix_a, None)
    Traceback (most recent call last):
        ...
    TypeError: Object arrays are not currently supported

    >>> lazy_matrix_mul("Something", matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul(["Something", 123], matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul(matrix_a, [(1, 2, 3), None])
    Traceback (most recent call last):
        ...
    TypeError: Object arrays are not currently supported

Misc
====

Checking number of arguments.

::

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

    >>> lazy_matrix_mul(matrix_a)
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Documentation and style
=======================

Checking if documentation exists.

::

    >>> len(__import__("101-lazy_matrix_mul").__doc__) > 8
    True

    >>> len(__import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__) > 8
    True

Checking pep8 style.

::

    >>> import os
    >>> os.system("pep8 101-lazy_matrix_mul.py")
    0

Checking shebang at beginning of module.

::

    >>> os.popen('head -1 101-lazy_matrix_mul.py').read()
    '#!/usr/bin/python3\n'

Checking tests file relative path.

::

    >>> os.popen('ls tests/101-lazy_matrix_mul.txt').read()
    'tests/101-lazy_matrix_mul.txt\n'

Checking newline at end of module.

::

    >>> os.popen('tail -1 101-lazy_matrix_mul.py | cat -e').read()[-1]
    '\n'
