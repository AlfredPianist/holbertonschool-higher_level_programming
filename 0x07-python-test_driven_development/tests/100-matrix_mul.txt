Test ``100-matrix_mul.txt`` for the ``100-matrix_mul`` module

===========================
 Using ``100-matrix_mul``
===========================

This file tests the function ``matrix_mul``.

Import
======

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Integers and floats
==================

``matrix_mul()`` returns a new matrix product of two matrices.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    [[7, 10], [15, 22]]

    >>> matrix_a = [
    ...    [1, 2]
    ... ]
    >>> matrix_b = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    [[13, 16]]

    >>> matrix_a = [
    ...    [1.5, 2],
    ...    [2.5, 3],
    ...    [3.5, -2.7]
    ... ]
    >>> matrix_b = [
    ...    [4.1, 0.3, -10, -1.2],
    ...    [0, 2, -20, 2]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    [[6.15, 4.45, -55.0, 2.2], [10.25, 6.75, -85.0, 3.0], [14.35, -4.35, 19.0, -9.6]]

Checking matrix argument length of rows exception.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4, 5]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

    >>> matrix_a = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4, 5]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

Checking correct dimensions of matrices to be multiplied.

::

    >>> matrix_a = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_b = [
    ...    [1, 3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

    >>> matrix_a = [
    ...    [1, 2, 3],
    ...    [3, 4, 5],
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

Checking non-empty matrices.

::

    >>> matrix_a = [
    ...    [3, 4],
    ...    [5, 6]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul([[]], matrix_b)
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> matrix_mul(matrix_a, [])
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

Non-real numbers and non numbers
================================

The ``matrix_mul`` function is not defined for complex numbers.

Checking type exception.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3j, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

The ``matrix_mul`` function is not defined for non-numbers.

Checking type exception.

::

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    ["hola", 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_a = [
    ...    [1, [1, 2]],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [("Hello", "World"), 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    >>> matrix_a = [
    ...    [{"hello": "world"}, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> matrix_a = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_b = [
    ...    [1, 2],
    ...    [3, 4]
    ... ]
    >>> matrix_mul(matrix_a, None)
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

    >>> matrix_mul("Something", matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> matrix_mul(["Something", 123], matrix_b)
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

    >>> matrix_mul(matrix_a, [(1, 2, 3), None])
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

Misc
====

Checking number of arguments.

::

    >>> matrix_mul()
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

    >>> matrix_mul(matrix_a)
    Traceback (most recent call last):
        ...
    TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Documentation and style
=======================

Checking if documentation exists.

::

    >>> len(__import__("100-matrix_mul").__doc__) > 8
    True

    >>> len(__import__("100-matrix_mul").matrix_mul.__doc__) > 8
    True

Checking pep8 style.

::

    >>> import os
    >>> os.system("pep8 100-matrix_mul.py")
    0

Checking shebang at beginning of module.

::

    >>> os.popen('head -1 100-matrix_mul.py').read()
    '#!/usr/bin/python3\n'

Checking tests file relative path.

::

    >>> os.popen('ls tests/100-matrix_mul.txt').read()
    'tests/100-matrix_mul.txt\n'

Checking newline at end of module.

::

    >>> os.popen('tail -1 100-matrix_mul.py | cat -e').read()[-1]
    '\n'
