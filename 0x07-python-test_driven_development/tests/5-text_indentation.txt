Test ``5-text_indentation.txt`` for the ``5-text_indentation`` module

===========================
 Using ``5-text_indentation``
0B===========================

This file tests the function ``text_indentation``.

Import
======

>>> text_indentation = __import__('5-text_indentation').text_indentation

Strings
=======

``text_indentation()`` prints ``My name is <first name> <last name>``

::

    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
    ... Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
    ... Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
    ... Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
    ... Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
    ... rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
    ... stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
    ... cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
    ... beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

    >>> text_indentation(".    ?\t:")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

    >>> text_indentation("           ")
    

    >>> text_indentation("      point      .")
    point      .
    <BLANKLINE>

    >>> text_indentation("  \n  .  ?  \n  .   :    . \n  \n  ?    ")
    <BLANKLINE>
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    <BLANKLINE>
    .
    <BLANKLINE>
    :
    <BLANKLINE>
    .
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    ?
    <BLANKLINE>

    >>> text_indentation("Hello\n\nMs.")
    Hello
    <BLANKLINE>
    Ms.
    <BLANKLINE>

    >>> text_indentation("Hola        como  \n  estas ?  \r MUY bien")
    Hola        como
    estas ?
    <BLANKLINE>
    <BLANKLINE>
    MUY bien

    >>> text_indentation("    Will the \n\n Real Slim Shady \n\n \
    ... Please stand up?    ")
    Will the
    <BLANKLINE>
    Real Slim Shady
    <BLANKLINE>
    Please stand up?
    <BLANKLINE>

    >>> text_indentation("To be, or not to be, that is the question:: \
    ... Whether 'tis nobler in the mind to suffer")
    To be, or not to be, that is the question:
    <BLANKLINE>
    :
    <BLANKLINE>
    Whether 'tis nobler in the mind to suffer

    >>> text_indentation("")
    

Checking text type exception.

::

    >>> text_indentation(None)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

    >>> text_indentation(123456)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

    >>> text_indentation(["Hello", "World"])
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

Misc
====

Checking number of arguments.

::

    >>> text_indentation()
    Traceback (most recent call last):
        ...
    TypeError: text_indentation() missing 1 required positional argument: 'text'

Documentation and style
=======================

Checking if documentation exists.

::

    >>> len(__import__("5-text_indentation").__doc__) > 8
    True

    >>> len(__import__("5-text_indentation").text_indentation.__doc__) > 8
    True

Checking pep8 style.

::

    >>> import os
    >>> os.system('pep8 5-text_indentation.py')
    0

Checking shebang at beginning of module.

::

    >>> os.popen('head -1 5-text_indentation.py').read()
    '#!/usr/bin/python3\n'

Checking tests file relative path.

::

    >>> os.popen('ls tests/5-text_indentation.txt').read()
    'tests/5-text_indentation.txt\n'

Checking newline at end of module.

::

    >>> os.popen('tail -1 5-text_indentation.py | cat -e').read()[-1]
    '\n'
